name: Validate Bibliography

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'bibliography/**/*.bib'
      - 'toolkit/**/*.js'
      - '.github/workflows/validate.yml'

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: toolkit/package-lock.json
        
    - name: Install dependencies
      run: |
        cd toolkit
        npm ci
        
    - name: Run validation
      id: validate
      run: |
        cd toolkit
        npm run validate:ci
        
    - name: Check for duplicates
      run: |
        cd toolkit
        npm run check-dups
        
    - name: Generate statistics
      id: stats
      run: |
        cd toolkit
        # Ensure clean JSON output by redirecting stderr to /dev/null
        node src/stats.js ../bibliography --json 2>/dev/null > ../stats-output.json
        # Verify the JSON is valid
        if ! jq empty ../stats-output.json; then
          echo "::error::Failed to generate valid JSON stats"
          exit 1
        fi
        
    - name: Comment PR with results
      if: github.event_name == 'pull_request' && success()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs').promises;
          const core = require('@actions/core');
          
          try {
            // Read and parse the stats file
            const statsData = await fs.readFile('stats-output.json', 'utf8');
            let stats;
            
            try {
              stats = JSON.parse(statsData);
            } catch (parseError) {
              core.error('Failed to parse stats JSON:');
              core.error(statsData);
              throw parseError;
            }
            
            // Generate the comment body
            const body = `## üìä Bibliography Validation Results
            
            ‚úÖ **Validation**: Passed
            
            ### Statistics
            - **Total Entries**: ${stats.total || 0}
            - **Entries with Abstracts**: ${stats.quality?.withAbstract || 0}/${stats.total || 0}
            - **Missing Abstracts**: ${(stats.total || 0) - (stats.quality?.withAbstract || 0)}
            
            ### Transformation Coverage
            - P (Perspective): ${stats.transformations?.P || 0}
            - IN (Inversion): ${stats.transformations?.IN || 0}
            - CO (Composition): ${stats.transformations?.CO || 0}
            - DE (Decomposition): ${stats.transformations?.DE || 0}
            - RE (Recursion): ${stats.transformations?.RE || 0}
            - SY (Synthesis): ${stats.transformations?.SY || 0}
            
            ### Quality Metrics
            - DOI Coverage: ${stats.total ? ((stats.quality?.withDOI || 0) / stats.total * 100).toFixed(1) : 0}% (${stats.quality?.withDOI || 0}/${stats.total || 0})
            - ISBN Coverage: ${stats.total ? ((stats.quality?.withISBN || 0) / stats.total * 100).toFixed(1) : 0}% (${stats.quality?.withISBN || 0}/${stats.total || 0})
            - Abstract Coverage: ${stats.total ? ((stats.quality?.withAbstract || 0) / stats.total * 100).toFixed(1) : 0}% (${stats.quality?.withAbstract || 0}/${stats.total || 0})
            - HUMMBL Keywords: ${stats.total ? ((stats.quality?.withKeywords || 0) / stats.total * 100).toFixed(1) : 0}% (${stats.quality?.withKeywords || 0}/${stats.total || 0})`;
            
            // Post the comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
            
            return 'Successfully posted PR comment';
            
          } catch (error) {
            core.error('Error in GitHub Script:');
            core.error(error);
            
            // Post a fallback error comment
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '‚ùå Failed to generate statistics. Please check the workflow logs for details.'
              });
            } catch (commentError) {
              core.error('Failed to post error comment:');
              core.error(commentError);
            }
            
            core.setFailed(`Failed to process stats: ${error.message}`);
            return null;
          }
